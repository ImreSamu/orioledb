name: dockerhub

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tags:
        description: "Dockerhub tags"
        required: false
        default: ""

env:
  # fork friendly: use your own dockerhub username
  DOCKER_IMAGE: "${{ secrets.DOCKERHUB_USERNAME  || 'orioledb' }}/orioledb"

jobs:
  push_to_registry:
    strategy:
      fail-fast: true
      matrix:
        postgres: [16, 17]
        compiler: [clang]
        distr: [alpine, ubuntu]
        include:
          - distr-version: "3.21"
            test_targets: "regresscheck isolationcheck testgrescheck"
            distr: alpine
          - distr-version: "focal"
            test_targets: "regresscheck isolationcheck"
            distr: ubuntu

    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: ${{ github.event.inputs.tags }}
          flavor: |
            latest=auto
            prefix=
            suffix=${{ contains(github.ref, 's3') && '-s3' || '' }}-pg${{ matrix.postgres }}${{ matrix.distr == 'ubuntu' && '-ubuntu' || '' }},onlatest=true

# ----------------------
# Build linux/amd64 for testing ( no push )
# ----------------------
      - name: Build orioletest_amd64 for testing (no push)
        id: build_orioletest_amd64
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.distr == 'ubuntu' && 'Dockerfile.ubuntu' || 'Dockerfile' }}
          platforms: linux/amd64
          push: false
          tags: orioletest_amd64
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ALPINE_VERSION=${{ matrix.distr == 'alpine' && matrix.distr-version || '' }}
            UBUNTU_VERSION=${{ matrix.distr == 'ubuntu' && matrix.distr-version || '' }}
            PG_MAJOR=${{ matrix.postgres }}
            BUILD_CC_COMPILER=${{ matrix.compiler }}
            DOCKER_PG_LLVM_DEPS=llvm-dev clang
            DEBUG_MODE=false

# ----------------------
# test linux/amd64 docker image
# ----------------------
      # docker image testing with https://github.com/docker-library/official-images.git
      # to check if the image is compatible with the official-images test suite
      # the special orioledb test config is in the ./test/tests/orioledb-config.sh
      # Read more: ./test/README.md
      - name: Run Docker-official-postgres tests + minimal orioledb test
        id: test_docker_official_images
        run: |
          OFFIMG_LOCAL_CLONE=./log_docker_build/official-images
          OFFIMG_REPO_URL=https://github.com/docker-library/official-images.git
          mkdir -p "$OFFIMG_LOCAL_CLONE"
          git clone --depth=1 --branch=master "$OFFIMG_REPO_URL" "$OFFIMG_LOCAL_CLONE"
          "${OFFIMG_LOCAL_CLONE}/test/run.sh" \
              -c "${OFFIMG_LOCAL_CLONE}/test/config.sh" \
              -c "test/orioledb-config.sh" \
              orioletest_amd64

      # run some make <check_targets> in the docker image
      - name: "Run test_targets: ${{ matrix.test_targets }}"
        id: test_targets
        run: |
          docker run --rm \
            --volume $(pwd):/github/workspace/orioledb \
            orioletest_amd64 \
            bash -c 'bash +x /github/workspace/orioledb/ci/check_docker.sh "${{ matrix.test_targets }}"'

# ----------------------
# final build and push
# - linux/amd64 should build from docker cache ( orioletest_amd64 )
# ----------------------
      - name: Build and push Docker image ( linux/amd64,linux/arm64 )
        id: build_and_push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.distr == 'ubuntu' && 'Dockerfile.ubuntu' || 'Dockerfile' }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ALPINE_VERSION=${{ matrix.distr == 'alpine' && matrix.distr-version || '' }}
            UBUNTU_VERSION=${{ matrix.distr == 'ubuntu' && matrix.distr-version || '' }}
            PG_MAJOR=${{ matrix.postgres }}
            BUILD_CC_COMPILER=${{ matrix.compiler }}
            DOCKER_PG_LLVM_DEPS=llvm-dev clang
            DEBUG_MODE=false
