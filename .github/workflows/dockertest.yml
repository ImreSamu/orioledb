name: dockerTEST
#
# This CI workflow performs automated Docker image building and testing for OrioleDB
# across multiple PostgreSQL versions and distributions.
#
# Test Phases:
# -----------
# 1. Docker image building with customizable build arguments
# 2. Official Docker Postgres library compatibility testing
# 3. OrioleDB-specific test suite execution
#

on:
  push:
  pull_request:

env:
  UNSTABLE_VERSIONS: '["edge", "devel", "testing", "unstable", "experimental"]'

defaults:
  run:
    shell: bash

jobs:
  test-docker-builds:
    strategy:
      fail-fast: true
      matrix:
        postgres: [16, 17]
        os:
          # clang-ubuntu-focal ( 20.04 )  We don't run testgrescheck; python 3.8 is too old
          - { compiler: "clang", distr: "ubuntu", distr-version: "focal",
              test_targets: "regresscheck isolationcheck" }
          # clang-alpine-latest
          - { compiler: "clang", distr: "alpine", distr-version: "latest",
              test_targets: "regresscheck isolationcheck testgrescheck"}
          # clang-ubuntu-latest
          - { compiler: "clang", distr: "ubuntu", distr-version: "latest",
              test_targets: "regresscheck isolationcheck testgrescheck" }
          # clang-debian-latest
          - { compiler: "clang", distr: "debian", distr-version: "latest",
              test_targets: "regresscheck isolationcheck testgrescheck" }

        # extra test cases
        include:
          # 17-gcc-alpine-latest
          - postgres: 17
            os: { compiler: "gcc", distr: "alpine", distr-version: "latest",
                  test_targets: "regresscheck isolationcheck testgrescheck" }
          # 17-gcc-ubuntu-latest
          - postgres: 17
            os: { compiler: "gcc", distr: "ubuntu", distr-version: "latest",
                  test_targets: "regresscheck isolationcheck testgrescheck" }
          # 17-clang-alpine-edge  : allowed to fail ( continue-on-error)
          - postgres: 17
            os: { compiler: "clang", distr: "alpine", distr-version: "edge",
                  test_targets: "regresscheck isolationcheck testgrescheck" }

    name: docker ${{ matrix.postgres }}-${{ matrix.os.compiler }}-${{ matrix.os.distr }}-${{ matrix.os.distr-version }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ contains(env.UNSTABLE_VERSIONS, matrix.os.distr-version) }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: docker build orioletest:${{ matrix.postgres }}-${{ matrix.os.compiler }}-${{ matrix.os.distr }}-${{ matrix.os.distr-version }}
        uses: docker/build-push-action@v6
        # https://github.com/docker/build-push-action
        with:
          context: .
          file: ${{ (matrix.os.distr == 'ubuntu' || matrix.os.distr == 'debian') && 'Dockerfile.ubuntu' || 'Dockerfile' }}
          platforms: linux/amd64
          push: false
          pull: true
          tags: orioletest:${{ matrix.postgres }}-${{ matrix.os.compiler }}-${{ matrix.os.distr }}-${{ matrix.os.distr-version }}
          # for alpine+ubuntu: using the old calling style ( deprecated )
          # for debian: using the new calling style
          build-args: |
            ALPINE_VERSION=${{ matrix.os.distr == 'alpine' && matrix.os.distr-version || '' }}
            UBUNTU_VERSION=${{ matrix.os.distr == 'ubuntu' && matrix.os.distr-version || '' }}
            BASE_IMAGE=${{ (matrix.os.distr == 'debian') && matrix.os.distr || '' }}
            BASE_VERSION=${{ (matrix.os.distr == 'debian') && matrix.os.distr-version || '' }}
            PG_MAJOR=${{ matrix.postgres }}
            BUILD_CC_COMPILER=${{ matrix.os.compiler }}
            DOCKER_PG_LLVM_DEPS=llvm-dev clang
            DEBUG_MODE=false

      # in the future ALPINE_VERSION, UBUNTU_VERSION will be removed
      # and only the BASE_IMAGE, BASE_VERSION could be set as:
      #     BASE_IMAGE=${{  matrix.os.distr || '' }}
      #     BASE_VERSION=${{ matrix.os.distr-version || '' }}

      # docker image testing with https://github.com/docker-library/official-images.git
      # to check if the image is compatible with the official-images test suite
      # the special orioledb test config is in the ./test/tests/orioledb-config.sh
      # Read more: ./test/README.md
      - name: Run Docker-official-postgres tests + minimal orioledb test
        run: |
          OFFIMG_LOCAL_CLONE=./log_docker_build/official-images
          OFFIMG_REPO_URL=https://github.com/docker-library/official-images.git
          mkdir -p "$OFFIMG_LOCAL_CLONE"
          git clone --depth=1 --branch=master "$OFFIMG_REPO_URL" "$OFFIMG_LOCAL_CLONE"
          "${OFFIMG_LOCAL_CLONE}/test/run.sh" \
              -c "${OFFIMG_LOCAL_CLONE}/test/config.sh" \
              -c "test/orioledb-config.sh" \
              orioletest:${{ matrix.postgres }}-${{ matrix.os.compiler }}-${{ matrix.os.distr }}-${{ matrix.os.distr-version }}

      # run some make <check_targets> in the docker image
      - name: Run test_targets "${{ matrix.os.test_targets }}"
        run: |
          docker run --rm \
            --volume $(pwd):/github/workspace/orioledb \
            orioletest:${{ matrix.postgres }}-${{ matrix.os.compiler }}-${{ matrix.os.distr }}-${{ matrix.os.distr-version }} \
            bash -c 'bash +x /github/workspace/orioledb/ci/check_docker.sh "${{ matrix.os.test_targets }}"'

      # For pushing the tested image to a registry
      # check this example:  https://docs.docker.com/build/ci/github-actions/test-before-push/